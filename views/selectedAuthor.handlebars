<!-- Link in View Author Letters Page CSS -->
<link href="/assets/style/author_letters_style.css" rel="stylesheet" type="text/css">


{{!-- Title using author-name or Name --}}
<h1 id="author-name-title" class="author-name" align="center"></h1>

<br/><br/>

{{!-- Row for Image and Bio --}}
<div class="row">

  {{!-- Image --}}
  <div class="col-md-5">
    <img src="http://placehold.it/350x350">
  </div>

  {{!-- Bio --}}
  <div class="col-md-7">

    {{!-- Repeat their name --}}
    <h3 class="author-name"></h3>

    {{!-- Important Facts --}}
    <ul>
      <li id="bio-birth"><b>Date of Birth: </b> </li>
      <li id="bio-death"><b>Date of Death: </b> </li>
      <li id="bio-enrolled"><b>Enrolled: </b> </li>
      <li id="bio-left"><b>Left N.S.T.C. for service: </b> </li>
      <li id="bio-return"><b>Return to N.S.T.C. from service: </b> </li>
      <li id="bio-graduated"><b>Graduated from N.S.T.C.: </b> </li>
      <li id="bio-degree"><b>Degree: </b> </li>
    <ul>

  </div>

<div>


<br/><br/>

{{!-- Row for Letters --}}
<div class="row">


  {{!-- Letters Title --}}
  <div class="col-md-12">
    <center><h2 id="mapped-letter">Letters</h2></center>
  </div>


  <div class="row">
    {{!-- Drop Down of all Letters to View --}}
    <div class="col-md-12">
      <center>
        {{!-- Drop Down --}}
        <div class="input-group">
          <b>Select a Letter: </b>
          <button id="selectLetter" type="button" class="btn btn-default dropdown-toggle searchButtons" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i><span id="currentLetter"></span> </i><span class="caret"></span></button>
          <ul id="letterDropDown" class="dropdown-menu">
            {{!-- Dynamically append letter names from database --}}
          </ul>
        </div>
      </center>
    </div>
  </div>

  <br/>


  {{!-- Side By Side Letters and Transcribe --}}
  <div class="row">

   {{!-- Letter Images --}}
    <div class="col-md-6">
      <img id="letterImage" src="" alt="Letter Scan" height="650" width="500" style="background-color: #ffffff;">
    </div>

    {{!-- Letter Transcribe --}}
    <div class="col-md-6">
      <div style="height: 650px; width: 500px; padding: 30px; overflow: auto; background-color: #e5e5e3;">
        {{!-- Dynamically Append Letter Text --}}
        <p id="letterText"></p>
      <div>
    </div>

  </div>


</div>



<br/><br/>


{{!-- Row for Map --}}
<div class="row">

 {{!-- Map Title --}}
  <div class="col-md-12">
    <center><h2>Map</h2></center>
  </div>


  <div class="row">
    {{!-- Drop Down of all Years to View --}}
    <div class="col-md-12">
    </div>
  </div>

  <br/>


  {{!-- View Letter Years on map --}}
  <div class="row">

    {{!-- Custom Map Error Message --}}
    <div id="maperror"></div>

    {{!-- Google Map --}}
    <div id="map"></div>

    {{!-- Google Map Legend --}}
    <div id="legend"><h3>Legend</h3></div>

    {{!-- Custom Marker Controls --}}
    <div id="marker_traveller">
      <div id="traversal"></div><br>
      <button onclick="goto_first_marker()">First Letter</button>
      <button onclick="goto_final_marker()">Final Letter</button><br><br>
      <button onclick="goto_previous_marker()">Previous Letter</button>
      <button onclick="goto_next_marker()">Next Letter</button><br><br>
      <button onclick="reset_map_view()">Reset Map View</button>
      <button onclick="toggle_legend_visibility()">Toggle Legend Visibility</button>
    </div>

    {{!-- Create Google Map Legend --}}
      <script>

        var map; //global ref to google map
        var center; //global ref to the center of a map with multiple letters
        var valid_markers = []; //only the markers with real location data
        var current_zoomed_coord_index = -1; //iterator for stepping through letters in chrono order -- initially at -1, then set to [0,+infinity]
        

        function initMap() {

          var infoWindow = new google.maps.InfoWindow({maxWidth: 200}); //global infowindow for letter info

          // Collect all Lat and Long Points for the Author 
          // --------------------------------------- start ---------------------------------------

          // Get Author Name from Route
          var authorRoute = decodeURI(window.location.pathname).split("/");
          var firstName = authorRoute[3];
          var lastName = authorRoute[2];


          // Collect all Lat & Long Points via Author Name (API Call)
          var currentURL = window.location.origin;
          $.get(currentURL + '/api/map/all/' + lastName + '/' + firstName, function(data){

            // Store repsonse
            markers = data;

            console.log(markers)

            // Author only had 1 letter
            if(markers.length === 1) {

              if(markers[0].lat && markers[0].lng)  {

                // Create Google Map
                map = new google.maps.Map(document.getElementById('map'), {
                  zoom: 2,
                  center: new google.maps.LatLng(markers[0].lat, markers[0].lng),
                  mapTypeId: 'roadmap'
                });
                
                // Create Legend and Center Map
                createLegend();
                document.getElementById("maperror").style.display = "none";
                center = map.center;
              }

              else {

                document.getElementById("maperror").innerHTML = "Location data is not available at this time.<br>";
              
                document.getElementById("map").style.display = "none";
                document.getElementById("marker_traveller").style.display = "none";
                return; //exit early so that the legend div is never created
              }

            }

            // Author had > 1 letter
            else {

              var bound = new google.maps.LatLngBounds();
              var nullcount = 0;

              for(i = 0; i < markers.length; i++) {

                if(markers[i].lat && markers[i].lng) { //if the point is NOT NULL

                  bound.extend(new google.maps.LatLng(markers[i].lat, markers[i].lng));
                }

                else { //both the lat and lng are null, meaning we don't have a point to map it to

                  nullcount++; //keep track of how many null points there are
                }
              }

              if(nullcount !== markers.length) { //if there is at least one non-null point, make the map object

                // Create Google Map
                map = new google.maps.Map(document.getElementById("map"), {
                  center: bound.getCenter(),
                  zoom: 2,
                  mapTypeId: 'roadmap'
                }); //create map, center is derived from latlngbounds

                // Create Legend and Center Map
                createLegend();
                center = bound.getCenter(); //store center in a global
                document.getElementById("maperror").style.display = "none";
              }

              else { //nullcount === markers.length, which means every point for the author was null, so DO NOT draw the map

                document.getElementById("maperror").innerHTML = "Location data is not available at this time.<br>";
              
                document.getElementById("map").style.display = "none";
                document.getElementById("marker_traveller").style.display = "none";
                return; //exit early so that the legend div is never created
              }

          }






              // ======================>>>>>>>> NEED TO CONTINUE HERE
              var oms = new OverlappingMarkerSpiderfier(map,{
                keepSpiderfied: true
              });

                var spider_infowindow = new google.maps.InfoWindow({maxWidth: 200});

                /* Not needed -- let the google maps API infowindow control clicks instead for now
                oms.addListener('click', function(marker, event) {
                  iw.setContent(marker.desc);
                  iw.open(map, marker);
                  }); */

                oms.addListener('spiderfy',function(markers) {
                  spider_infowindow.close();
                })

                var distinct_array = {};

                for(i = 0; i < markers.length; i++) {
                  //get distinct marker lat/lng combos
                  if(markers[i].lat && markers[i].lng) {

                    var coords = markers[i].lat+","+markers[i].lng;
                    if(distinct_array[coords])
                      distinct_array[coords]++;
                    else
                      distinct_array[coords] = 1;
                  }
                }

              var lineSymbol = {
                path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
              };

              var chronocounter = 0;

              for(var i = 0; i < markers.length; i++) {

                if(markers[i].lat && markers[i].lng) { //if the map point exists

                  chronocounter++;

                  var coords = markers[i].lat+","+markers[i].lng;

                  var name = markers[i].filename;
                  var address = markers[i].location;
                  var point = new google.maps.LatLng(
                    parseFloat(markers[i].lat),
                    parseFloat(markers[i].lng));
                  var letterid = markers[i].id;
                  var year = markers[i].ts_dateguess.substring(0, 4);;

                  if(year > "0000") { //if a year is not null, by default make the path point to that year, single icon on the spot

                    var marker_icon_filepath = "/marker_icons/" + year.toString() + "_single.png";
                  }

                  else { //year is unknown

                    var marker_icon_filepath = "/marker_icons/unknown_single.png";
                  }

                  var html = '<b><a href="#mapped-letter" class="mapMarkerIconLink">' + 
                              name + '</a>'+ 
                              '</b> <br>' + 
                              address +
                              '<br>';
                  var icon = {};

                  //change this to generate string that points to proper marker, then use that in the icon -> we can go from this to use normal markers instead of MarkerWithLabel
                  //year maps to color - add year to getxml so that we can easily pull it like the data above
                  //order maps to marker content - use chronocounter in the string generation
                  //remove the above var icon, and directly point to the generated string instead
                  //problem: this approach doesn't map density -- may need colored *and* shaped marker

                  //when this works, build a legend for the map

                  var marker = new MarkerWithLabel({
                    map: map,
                    position: point,
                    icon: marker_icon_filepath,
                    name: name,
                    labelAnchor: new google.maps.Point(3,27),
                    year: year,
                    chronoSpot: chronocounter //label markers with the order they appear (chronologically)
                  });

                  if(chronocounter >= 10) { //slightly move the anchor to make 2-digit counters appear well

                    marker.setOptions({
                      labelAnchor: new google.maps.Point(6,27)
                    });
                  }

                //if the points are going to be spiderfied, add them to the oms instance
                //this conditional weeds out points that fall on the same spot

                if(distinct_array[coords] > 1) {
                  oms.addMarker(marker);
                  
                  if(year > "0000") {
                    marker.setOptions({
                      icon: "/marker_icons/" + year.toString() + "_multiple.png"
                    }); 
                  }

                  else {
                    marker.setOptions({
                      icon: "/marker_icons/unknown_multiple.png"
                    });
                  } 
                }

                valid_markers.push(marker);
                
                bindInfoWindow(marker, map, infoWindow, html); //bind ALL points to the google.maps.event

                } //endif
              } //end marker loop

            // for(var i = 0; i < valid_markers.length-1; i++) {

            //   if(!valid_markers[i].position.equals(valid_markers[i+1].position) && valid_markers[i].year > "0000" && valid_markers[i+1].year > "0000") { //if the pair is on the exact same spot, OR one of the two points has an unknown date, do not draw the polyline

            //     var midpoint = google.maps.geometry.spherical.interpolate(valid_markers[i].position,valid_markers[i+1].position,0.5); //midway pt between these two markers

            //     var polyLabel = new Label({
            //       text: valid_markers[i].name + " to " + valid_markers[i+1].name,
            //       position: midpoint
            //     });

            //     var path = new google.maps.Polyline({
            //       path: [valid_markers[i].position,valid_markers[i+1].position],
            //       icons: [{
            //         icon: lineSymbol,
            //         offset: '100%'
            //       }],
            //       geodesic: true,
            //       strokeColor: '#2f2f2f',
            //       strokeOpacity: 1.0,
            //       strokeWeight: 4,
            //       map: map
            //     });

            //     create_polyline_listeners(path, polyLabel);
            //   } //endif
            // } //endloop

             // legend(map); //call the legend function in create_legend.js

              document.getElementById("traversal").innerHTML = "Use the buttons below to step through the letters chronologically.";




              // OTHER FUNCTIONS FOR MAPPNG
              function create_polyline_listeners(polyline, label) {

                google.maps.event.addListener(polyline, 'mouseover', function(e) {

                    var tooltipLat = e.latLng.lat();
                    var tooltipLng = e.latLng.lng();
                    label.position = new google.maps.LatLng(tooltipLat, tooltipLng);
                    //label.position = e.latLng;

                    label.setMap(map);
                    
                    polyline.setOptions({ strokeColor: '#660033',
                                          strokeWeight: 6});  
                });

                google.maps.event.addListener(polyline, 'mouseout', function(e) {

                    label.setMap(null);
                    polyline.setOptions({ strokeColor: '#2f2f2f',
                                          strokeWeight: 4});  
                });
              }

              

              function bindInfoWindow(marker, map, infoWindow, html) {

                google.maps.event.addListener(marker, 'click', function() {

                  infoWindow.setContent(html);
                  infoWindow.open(map,marker);

                  //extra code to bind the map navigation to marker clicks
                  current_zoomed_coord_index = marker.chronoSpot-1; //-1 for 0-indexing
                  document.getElementById("traversal").innerHTML = "Letter " + (current_zoomed_coord_index+1) + " of " + valid_markers.length + " (chronologically)";
                });
              }

      





          });


            // --------------------------------------- end ---------------------------------------








          // Create a Custom Map Legend
          // --------------------------------------- start ---------------------------------------
          function createLegend(){
            var legend = document.getElementById('legend');
            legend.style.display = "block"; //toggle visibility here, when it's known the legend will actually be needed 
            
            var prefixes = ["unknown","1941","1942","1943","1944","1945","1946","1950"];

            for(var i = 0; i < prefixes.length; i++) {

              var single_icon = "/marker_icons/" + prefixes[i] + "_single.png";
              var multiple_icon = "/marker_icons/" + prefixes[i] + "_multiple.png";

              var single_name = prefixes[i] + " (single)";
              var multiple_name = prefixes[i] + " (multiple)";

              var div = document.createElement('div');

              div.innerHTML = '<img src="' + single_icon + '"> ' + single_name + '<img src="' + multiple_icon + '"> ' + multiple_name;
              legend.appendChild(div);
            }

            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend); //push the filled legend div to the map
          }

          // --------------------------------------- end ---------------------------------------


        }
    </script>





    {{!-- Toggle Legend Visibility --}}
    <script type="text/javascript">

      function toggle_legend_visibility() {

        var legend = document.getElementById('legend');

        if(legend.style.display == "block") { //if visible, hide it

          legend.style.display = "none";
        }

        else { //if hidden, show it

          legend.style.display = "block";
        }
      }

    </script>






    {{!-- Toggle Other Map Functionality --}}
    <script type="text/javascript">
      function goto_first_marker() {

        map.setZoom(7);
        current_zoomed_coord_index = 0; //reset current zoomed coord index
        map.panTo(valid_markers[current_zoomed_coord_index].position);
        google.maps.event.trigger(valid_markers[current_zoomed_coord_index],'click');
        document.getElementById("traversal").innerHTML = "Letter " + (current_zoomed_coord_index+1) + " of " + valid_markers.length + " (chronologically)";
      }

      function goto_final_marker() {

        map.setZoom(7);
        current_zoomed_coord_index = valid_markers.length-1; //reassign current zoomed coord
        map.panTo(valid_markers[current_zoomed_coord_index].position);
        google.maps.event.trigger(valid_markers[current_zoomed_coord_index],'click');
        document.getElementById("traversal").innerHTML = "Letter " + (current_zoomed_coord_index+1) + " of " + valid_markers.length + " (chronologically)";
      }

      function goto_previous_marker() {

        if(current_zoomed_coord_index === 0 || current_zoomed_coord_index === -1) {

          //if the user navigated to the start of the path, OR has freshly loaded the map and not used the buttons yet, OR reset the map view, wrap around to the end
          map.setZoom(7);
          current_zoomed_coord_index = valid_markers.length-1 //reassign current zoomed coord
          map.panTo(valid_markers[current_zoomed_coord_index].position);
          google.maps.event.trigger(valid_markers[current_zoomed_coord_index],'click');
          document.getElementById("traversal").innerHTML = "Letter " + (current_zoomed_coord_index+1) + " of " + valid_markers.length + " (chronologically)";
        }

        else {

          //the user is somewhere from coords[1] to coords[coords.length-1], so go to previous marker as expected
          map.setZoom(7);
          current_zoomed_coord_index--;
          map.panTo(valid_markers[current_zoomed_coord_index].position);
          google.maps.event.trigger(valid_markers[current_zoomed_coord_index],'click');
          document.getElementById("traversal").innerHTML = "Letter " + (current_zoomed_coord_index+1) + " of " + valid_markers.length + " (chronologically)";     
        }
      }

      function goto_next_marker() {

        if(current_zoomed_coord_index === valid_markers.length-1) {

          //if the user navigated to the end of the path, wrap around to the beginning
          map.setZoom(7);
          current_zoomed_coord_index = 0; //reassign current zoomed coord
          map.panTo(valid_markers[current_zoomed_coord_index].position);
          google.maps.event.trigger(valid_markers[current_zoomed_coord_index],'click');
          document.getElementById("traversal").innerHTML = "Letter " + (current_zoomed_coord_index+1) + " of " + valid_markers.length + " (chronologically)";
        }

        else {

          //the user is somwhere from coords[-1] to coords[coords.length-2], go to next as expected
          map.setZoom(7);
          current_zoomed_coord_index++;
          map.panTo(valid_markers[current_zoomed_coord_index].position);
          google.maps.event.trigger(valid_markers[current_zoomed_coord_index],'click');
          document.getElementById("traversal").innerHTML = "Letter " + (current_zoomed_coord_index+1) + " of " + valid_markers.length + " (chronologically)";
        }
      }

      function reset_map_view() {

        map.setZoom(2);
        map.setCenter(center);
        infoWindow.close();
        document.getElementById("traversal").innerHTML = "Use the buttons below to step through the letters chronologically."; //reset the traversal text
        current_zoomed_coord_index = -1; //reset current zoomed coord index as if the map was freshly loaded
      }


    </script>

  </div>

</div>


{{!-- Link in JavaScript to collect all letter names from API --}}
<script src="/assets/javascripts/selectedAuthorLetters.js"></script>

{{!-- Google Maps API Resources --}}
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwJ4VNrbXp9LO1_9O4H4kg-vwq8C0nPTk&callback=initMap"></script>
<script type="text/javascript" src="/map_libraries/OverlappingMarkerSpiderfier.js"></script>
<script type="text/javascript" src="/map_libraries/markerwithlabel.js"></script>
<script type="text/javascript" src="/map_libraries/polyline_labels.js"></script>